#!/usr/bin/env python3

import os
import sys
import time
from optparse import OptionParser
import PatternGeneratorData
import SitcpRbcp
import socket
import struct

# XXX: global variable for options
options      = {}
cmdline_args = []

def process_options():
    global options
    global cmdline_args
    global parser

    parser = OptionParser(usage = 'usage: %prog [options] datafile ip_address', version = '%prog 1.2')

    # -d, --debug
    parser.add_option('-d', '--debug',
                      action = 'store_true',
                      dest   = 'debug',
                      help   = 'show debug message')
    parser.set_defaults(debug = False)

    # -s, --sleep
    parser.add_option('-s', '--sleep',
                      action = 'store',
                      type   = 'int',
                      dest   = 'sleep_u_sec_between_packet',
                      help   = 'sleep micro seconds between sending packet (NOT YET IMPLEMENT)')
    parser.set_defaults(sleep_u_sec_between_packet = 0)

    # -v, --verbose
    parser.add_option('-v', '--verbose',
                      action = 'store_true',
                      dest   = 'verbose',
                      help   = 'print verbose message')
    parser.set_defaults(verbose = False)

    parser.add_option('-p', '--pulsewidth',
                      action = 'store',
                      type   = 'int',
                      dest   = 'pulsewidth',
                      help   = 'specify pulsewidth (Value 1 correspond 20 ns)')
    parser.set_defaults(pulsewidth = 0)

    # -F, --dont-verify-full
    parser.add_option('-F', '--dont-verify-full',
                      action = 'store_true',
                      dest   = 'dont_verify_full',
                      help   = 'do not verify buffer is full or not')
    parser.set_defaults(dont_verify_full = False)

    (options, cmdline_args) = parser.parse_args()

def print_options_and_args():
    # don't need "global options" to read global variable
    print('option dump:', options)

    if len(cmdline_args) > 0:
        print('cmdline_args:', cmdline_args)

def is_busy(rbcp, ip_address):
    """FIFO full bit.  Return True if full"""
    fifo_full_address = 0x08
    b = ord(rbcp.read_registers(ip_address, fifo_full_address, 1))
    if (b & 0x80) == 0x80:
        return True
    
    if options.verbose:
        sys.stderr.write('not busy\n')
    return False

def send_packet(p, rbcp, ip_address):

    #print 'try to send: %d' % (p.get_bit_len_ascii_data())
    if options.debug:
        p.set_debug()
    packet_data = p.get_binary_to_send()

    if options.debug:
        sys.stdout.write('dump packet data part to stderr\n')
        sys.stderr.write(packet_data)

    if options.dont_verify_full:
        pass
    else:
        while is_busy(rbcp, ip_address):
            if options.verbose:
                sys.stderr.write('busy!\n')
            time.sleep(0.0001)

    try:
        rbcp.write_registers(ip_address, address = 0x200, 
            length = len(packet_data), id = 1, data = packet_data)
    except socket.error as e:
        sys.exit(e)
    except Exception as e:
        sys.exit(e)
    
    # send update packet
    update_address = 0x08
    update_data = struct.pack('>B', 0x01)
    try:
        rbcp.write_registers(ip_address, address = update_address,
            length = len(update_data), id = 2, data = update_data)
    except socket.error as e:
        sys.stderr.write('update packet')
        sys.exit(e)
    except Exception as e:
        sys.stderr.write('update packet')
        sys.exit(e)

def main():
    process_options()
    if options.verbose:
        print_options_and_args()
    
    if len(cmdline_args) != 2:
        parser.print_usage()
        sys.exit(1)

    try:
        data_file = open(cmdline_args[0], 'r')
    except IOError as e:
        sys.exit(e)
    
    ip_address = cmdline_args[1]
    if options.debug:
        print(ip_address)

    pgd = PatternGeneratorData.PatternGeneratorData()
    rbcp = SitcpRbcp.SitcpRbcp()

    # pulsewidth option
    if options.pulsewidth > 0:
        pulsewidth = options.pulsewidth
        if pulsewidth > 255:
            sys.stderr.write('pulsewidth too large: %d' % (pulsewidth))
        pulsewidth_data = struct.pack('>B', pulsewidth)
        pulsewidth_address = 0x0c
        try:
            rbcp.write_registers(ip_address, address = pulsewidth_address,
                length = len(pulsewidth_data), id = 3, data = pulsewidth_data)
        except socket.error as e:
            sys.stderr.write('update packet')
            sys.exit(e)
        except Exception as e:
            sys.stderr.write('update packet')
            sys.exit(e)

    for line_num, line in enumerate(data_file, 1): # 1: line number start with 1
        line = line.partition('#')[0]
        line = line.strip()
        if line == '':
            continue
        else:
            try:
                pgd.accumurate_ascii_data(line)
            except ValueError as e:
                # ascii data line has invalid char.
                sys.stderr.write('In line: %d %s ' % (line_num, line))
                sys.exit(e)
        if pgd.get_bit_len_ascii_data() == (256*8 - 32): # We cannot send 256 bytes and more at once
            send_packet(pgd, rbcp, ip_address)
            pgd.clear_ascii_data()
            
    if pgd.get_bit_len_ascii_data() != 0:
        # we have remaining data not aligned in (256*8 -32) bits at the end of file
        send_packet(pgd, rbcp, ip_address)
    
    data_file.close()

if __name__ == '__main__':
    main()
